name: CI

on:
  push:
    branches:
    - master
  pull_request:
  schedule:
  # Every monday at 09:00 in the morning
  - cron: '0 9 * * MON'

permissions:
  contents: read

env:
  # Disable incremental compilation
  CARGO_BUILD_INCREMENTAL: false
  # Set prettier + more verbose terminal output
  CARGO_TERM_COLOR: always
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1
  # Faster compilation, error on warnings and only document current crate
  RUSTFLAGS: "--codegen=debuginfo=0 --deny=warnings"
  RUSTDOCFLAGS: "--deny=warnings"
  # Minimum deployment target
  MACOSX_DEPLOYMENT_TARGET: 10.7
  IPHONEOS_DEPLOYMENT_TARGET: 7.0
  # We only support compiling Objective-C code with clang
  CC: clang
  CXX: clang++

  # Crates that we want to run `rustdoc` and `clippy` on
  PUBLIC_CRATES: >-
    --package=objc2-proc-macros
    --package=objc-sys
    --package=objc2-encode
    --package=block-sys
    --package=block2
    --package=objc2
    --package=icrate
  # The current nightly Rust version that our CI uses
  #
  # To help find regressions, we explicitly _don't_ pin the version here!
  CURRENT_NIGHTLY: nightly
  INTERESTING_FEATURES: malloc,block,verify,uuid

jobs:
  fmt:
    name: Check formatting
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: cargo fmt
      # This runs on the entire repository, including submodules
      run: cargo fmt -- --check

  lint:
    name: Lint ${{ matrix.name }}
    runs-on: ubuntu-latest

    strategy:
      # These jobs are "cheap" to run, will likely run in parallel anyhow, and
      # it can be useful to know exactly which parts failed.
      fail-fast: false
      matrix:
        include:
        - name: macOS 64bit
          target: aarch64-apple-darwin
          args: >-
            $PUBLIC_CRATES
            --features=$INTERESTING_FEATURES
            --features=unstable-frameworks-macos-12
        - name: iOS 32bit
          target: armv7-apple-ios
          host-target: x86_64-apple-darwin
          args: >-
            -Zbuild-std
            $PUBLIC_CRATES
            --features=$INTERESTING_FEATURES
            --features=unstable-frameworks-ios
        - name: GNUStep + exceptions
          target: x86_64-unknown-linux-gnu
          args: >-
            $PUBLIC_CRATES
            --no-default-features --features=std
            --features=gnustep-1-9
            --features=$INTERESTING_FEATURES,catch-all,exception
            --features=unstable-frameworks-gnustep
        - name: header-translator
          target: x86_64-unknown-linux-gnu
          args: >-
            -pheader-translator
            --features=run
        - name: test-assembly
          target: x86_64-unknown-linux-gnu
          args: >-
            -ptest-assembly
            --features=run

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.CURRENT_NIGHTLY }}
        profile: minimal
        override: true
        components: clippy ${{ matrix.host-target && ', rust-src' }}
        target: ${{ matrix.host-target || matrix.target }}

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}

    - name: cargo doc
      run: cargo doc --no-deps --document-private-items ${{ matrix.args }}

    - name: cargo clippy
      run: cargo clippy --all-targets ${{ matrix.args }}

  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      # MacOS instances are rate-limited, which means that whenever we can
      # avoid do some work, we should!
      fail-fast: true
      matrix:
        include:
        - name: Test macOS 11
          os: macos-11
          target: x86_64-apple-darwin
          frameworks: macos-11
        - name: Test macOS 12
          os: macos-12
          target: x86_64-apple-darwin
          frameworks: macos-12
        - name: Build macOS AArch64
          os: macos-latest
          target: aarch64-apple-darwin
          test-args: --no-run
          frameworks: macos-11
        - name: Test macOS old SDK
          os: macos-latest
          target: x86_64-apple-darwin
          # Oldest macOS version we support
          sdk: "10.7"
          frameworks: macos-10-7
        - name: Test macOS nightly
          os: macos-latest
          target: x86_64-apple-darwin
          rust:
            toolchain: nightly
          frameworks: macos-11
        - name: Build macOS 32bit
          os: macos-latest
          target: i686-apple-darwin
          rust:
            toolchain: nightly
            target: x86_64-apple-darwin
            components: rust-src
          args: -Zbuild-std -Zdoctest-xcompile
          # 32-bit support was removed in 10.15, so we can't test the
          # binary, only build it
          test-args: --no-run
          # Newest SDK that supports 32-bit
          sdk: "10.13"
          frameworks: macos-10-13
        - name: Test GNUStep with libobjc2 v1.9
          os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          runtime: gnustep-1-9
          libobjc2: "1.9"
          frameworks: gnustep
        - name: Test GNUStep with libobjc2 v2.0
          # Fails for some reason on Ubuntu 22
          os: ubuntu-20.04
          target: x86_64-unknown-linux-gnu
          runtime: gnustep-2-0
          libobjc2: "2.0"
          frameworks: gnustep
        - name: Test GNUStep with libobjc2 v2.1 on nightly
          os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          rust:
            toolchain: nightly
          runtime: gnustep-2-1
          libobjc2: "2.1"
          fuzz: true
          frameworks: gnustep
        - name: Test GNUStep 32bit
          # Ubuntu 22 image doesn't have the required C++ libraries
          # installed for 32-bit
          os: ubuntu-20.04
          target: i686-unknown-linux-gnu
          cflags: -m32
          configureflags: --target=x86-pc-linux-gnu
          runtime: gnustep-1-9
          libobjc2: "1.9"
          frameworks: gnustep-32bit
        - name: Test iOS simulator x86 64bit
          os: macos-11
          target: x86_64-apple-ios
          dinghy: true
          frameworks: ios
        - name: Build iOS simulator ARM64
          os: macos-latest
          target: aarch64-apple-ios-sim
          test-args: --no-run
          frameworks: ios
        - name: Build iOS ARM64
          os: macos-latest
          target: aarch64-apple-ios
          test-args: --no-run
          frameworks: ios
        - name: Build iOS ARMv7
          os: macos-latest
          target: armv7-apple-ios
          rust:
            toolchain: nightly
            target: x86_64-apple-darwin
            components: rust-src
          args: -Zbuild-std -Zdoctest-xcompile
          test-args: --no-run
          frameworks: ios
        - name: Build iOS ARMv7s
          os: macos-latest
          target: armv7s-apple-ios
          rust:
            toolchain: nightly
            target: x86_64-apple-darwin
            components: rust-src
          args: -Zbuild-std -Zdoctest-xcompile
          test-args: --no-run
          frameworks: ios
        - name: Build iOS 32bit x86
          os: macos-latest
          target: i386-apple-ios
          rust:
            toolchain: nightly
            target: x86_64-apple-darwin
            components: rust-src
          args: -Zbuild-std -Zdoctest-xcompile
          test-args: --no-run
          frameworks: ios
        - name: Test Compiler-RT
          os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          runtime: compiler-rt
          args: -p block-sys -p block2
          features: ' '
          unstable-features: ' '
          frameworks: none

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      CFLAGS: ${{ matrix.cflags }}
      CXXFLAGS: ${{ matrix.cflags }}
      ASMFLAGS: ${{ matrix.cflags }}
      LDFLAGS: ${{ matrix.cflags }}
      ARGS: --no-default-features --features=std,${{ matrix.runtime || 'apple' }} ${{ matrix.args }}
      # Use --no-fail-fast, except with dinghy
      TESTARGS: ${{ matrix.dinghy && ' ' || '--no-fail-fast' }} ${{ matrix.test-args }}
      SOME_FEATURES: ${{ matrix.features || 'malloc,block,exception,Foundation' }}
      FEATURES: >-
        ${{
          matrix.features || format(
            'malloc,block,exception,catch-all,verify,uuid,unstable-frameworks-{0}',
            matrix.frameworks
          )
        }}
      UNSTABLE_FEATURES: ${{ matrix.unstable-features || 'unstable-autoreleasesafe,unstable-c-unwind' }}
      CMD: cargo

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Cache external dependencies
      id: extern-cache
      uses: actions/cache@v3
      with:
        # We could have just cached build-files, and then rerun the build tool
        # every time, letting it figure out what's changed. However, this has
        # several problems:
        #
        # - GNUStep-Base ./configure invalidates the cache, which makes it
        #   very hard to know when to rebuild and when not to.
        # - We don't want to rebuild cargo-dinghy every time the ~/.cargo
        #   folder is invalidated.
        #
        # So instead we just place the final outputs in ~/extern, and cache
        # them there:
        # - bin/cargo-dinghy
        # - bin/cargo-fuzz
        # - lib/libobjc.so
        # - lib/libgnustep-base.so
        # - include/Foundation/*
        # - include/objc/*
        # - sdk/...
        path: |
          ~/extern/bin
          ~/extern/lib
          ~/extern/include
          ~/extern/sdk
        # Change this key if we start caching more things
        key: ${{ matrix.name }}-extern-v5

    - name: Setup environment
      # These add to PATH-like variables, so they can always be set
      run: |
        mkdir -p $HOME/extern/bin
        mkdir -p $HOME/extern/lib
        mkdir -p $HOME/extern/include
        mkdir -p $HOME/extern/fuzz
        echo "PATH=$HOME/extern/bin:$PATH" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/extern/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/extern/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "CPATH=$HOME/extern/include:$CPATH" >> $GITHUB_ENV
        # Debug print these
        ls -al $HOME/extern/*

    - name: Setup SDK environment
      if: matrix.sdk
      # This changes a variable, so is only set when a custom SDK is used
      run: |
        echo "SDKROOT=$HOME/extern/sdk" >> $GITHUB_ENV
        # Temporary
        echo "RUSTFLAGS=$RUSTFLAGS --cfg=macos_10_7" >> $GITHUB_ENV

    - name: Install Clang & Valgrind
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get -y install clang valgrind

    - name: Install libBlocksRuntime
      if: contains(matrix.runtime, 'compiler-rt')
      run: sudo apt-get -y install libblocksruntime-dev

    - name: Install cross compilation tools
      if: matrix.target == 'i686-unknown-linux-gnu'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get -y install gcc-multilib libgcc-10-dev:i386 \
          libc6-dev:i386 libstdc++-10-dev:i386 libffi-dev:i386 \
          libxml2-dev:i386 libicu-dev:i386

    - name: Download different macOS SDK
      if: matrix.sdk && steps.extern-cache.outputs.cache-hit != 'true'
      # macOS SDKs:
      # - https://github.com/alexey-lysiuk/macos-sdk
      # - https://github.com/phracker/MacOSX-SDKs
      # - https://github.com/hexops/sdk-macos-12.0
      #
      # iOS SDKs:
      # - https://github.com/xybp888/iOS-SDKs
      # - https://github.com/theos/sdks
      run: |
        wget https://github.com/alexey-lysiuk/macos-sdk/releases/download/${{ matrix.sdk }}/MacOSX${{ matrix.sdk }}.tar.bz2
        tar -xyf MacOSX${{ matrix.sdk }}.tar.bz2
        mv MacOSX${{ matrix.sdk }}.sdk $HOME/extern/sdk

    - name: Install Make and Cmake
      if: contains(matrix.runtime, 'gnustep') && steps.extern-cache.outputs.cache-hit != 'true'
      run: sudo apt-get -y install make cmake

    - name: Install GNUStep libobjc2
      if: matrix.libobjc2 && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/libobjc2/archive/refs/tags/v${{ matrix.libobjc2 }}.tar.gz
        tar -xzf v${{ matrix.libobjc2 }}.tar.gz

        # Install robin-map on v2.1
        if test -d libobjc2-2.1; then
          cd libobjc2-2.1/third_party
          # Remove possibly existing `robin-map` folder
          rm -rf robin-map
          wget https://github.com/Tessil/robin-map/archive/757de829927489bee55ab02147484850c687b620.tar.gz
          tar -xzf 757de829927489bee55ab02147484850c687b620.tar.gz
          mv robin-map-757de829927489bee55ab02147484850c687b620 robin-map
          cd ../..
        fi

        mkdir -p libobjc2-${{ matrix.libobjc2 }}/build
        cd libobjc2-${{ matrix.libobjc2 }}/build
        cmake -Wno-dev -DCMAKE_INSTALL_PREFIX=$HOME/extern -DTESTS=OFF ..
        make install

    - name: Install GNUStep make
      if: contains(matrix.runtime, 'gnustep') && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/tools-make/archive/refs/tags/make-2_9_0.tar.gz
        tar -xzf make-2_9_0.tar.gz
        mkdir -p tools-make-make-2_9_0/build
        cd tools-make-make-2_9_0/build
        ../configure --prefix=$HOME/extern --with-library-combo=ng-gnu-gnu
        make install

    - name: Install GNUStep base library
      if: contains(matrix.runtime, 'gnustep') && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/libs-base/archive/refs/tags/base-1_28_0.tar.gz
        tar -xzf base-1_28_0.tar.gz
        cd libs-base-base-1_28_0
        ./configure --prefix=$HOME/extern --disable-tls --disable-xslt ${{ matrix.platform.configureflags }}
        make install
        ls -al $HOME/extern/*

    - name: Install GNUStep GUI
      if: contains(matrix.runtime, 'gnustep') && matrix.target == 'x86_64-unknown-linux-gnu' && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/libs-gui/archive/refs/tags/gui-0_29_0.tar.gz
        tar -xzf gui-0_29_0.tar.gz
        cd libs-gui-gui-0_29_0
        ./configure --prefix=$HOME/extern --disable-jpeg ${{ matrix.platform.configureflags }}
        make install
        ls -al $HOME/extern/*

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-${{ matrix.name }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain || 'stable' }}
        profile: minimal
        override: true
        components: ${{ matrix.rust.components }}
        # Allows installing for a different base target
        target: ${{ matrix.rust.target || matrix.target }}

    - name: Install Cargo Dinghy
      if: matrix.dinghy && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        export HOST_TARGET=$(rustc -vV | grep host | cut -f2 -d' ')

        cargo install cargo-dinghy --version=^0.6.0 --root=$HOME/extern --target=$HOST_TARGET

    - name: Launch XCode Simulator and prepare Dinghy
      if: matrix.dinghy
      # Note that we're not testing all configurations with dinghy, since that
      # takes a very long time to run, and hence impedes general development.
      run: |
        # Get system info
        xcrun simctl list runtimes

        # Launch the simulator
        RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | cut -d ' ' -f 7 | tail -1)
        SIM_ID=$(xcrun simctl create My-iphone7 com.apple.CoreSimulator.SimDeviceType.iPhone-7 $RUNTIME_ID)
        xcrun simctl boot $SIM_ID

        # Export variable
        echo "CMD=$HOME/extern/bin/cargo-dinghy -d=$SIM_ID" >> $GITHUB_ENV

    - name: Install Cargo Fuzz
      if: matrix.fuzz && steps.extern-cache.outputs.cache-hit != 'true'
      run: |
        export HOST_TARGET=$(rustc -vV | grep host | cut -f2 -d' ')

        cargo install cargo-fuzz --version=^0.11.1 --root=$HOME/extern --target=$HOST_TARGET

    - name: Build
      run: $CMD build ${{ env.ARGS }}

    - name: Test without features
      if: ${{ !matrix.dinghy }}
      run: cargo test ${{ env.ARGS }} ${{ env.TESTARGS }}

    - name: Test with some features
      if: ${{ !matrix.dinghy }}
      run: cargo test ${{ env.ARGS }} ${{ env.TESTARGS }} --tests --features=${{ env.SOME_FEATURES }}

    - name: Test with features
      run: $CMD test ${{ env.ARGS }} ${{ env.TESTARGS }} --features=${{ env.FEATURES }}

    - name: Test in release mode without features
      if: ${{ !matrix.dinghy }}
      run: cargo test ${{ env.ARGS }} ${{ env.TESTARGS }} --release

    - name: Test in release mode with features
      if: ${{ !matrix.dinghy }}
      run: cargo test ${{ env.ARGS }} ${{ env.TESTARGS }} --features=${{ env.FEATURES }} --release

    - name: Run fuzzing
      if: ${{ matrix.fuzz }}
      run: |
        # Run each target for 100000 runs (approx. 5 seconds), and timeout
        # after 2 seconds.
        #
        # We specify the number of runs explicitly instead of using
        # `max_total_time`, to get more determinism.
        for target in $($HOME/extern/bin/cargo-fuzz list)
        do
          $HOME/extern/bin/cargo-fuzz run $target ${{ env.ARGS }} -- -runs=10000 -timeout=2 -jobs=10
        done

        # Check if the fuzzer encountered something that should be added to
        # the corpus.
        git diff --exit-code fuzz/

    - name: Run benchmarks
      # Difficult to install Valgrind on macOS
      # See https://github.com/LouisBrunner/valgrind-macos
      if: contains(matrix.os, 'ubuntu')
      run: cargo bench ${{ env.ARGS }} ${{ env.TESTARGS }}

    - name: Test with unstable features
      if: ${{ !matrix.dinghy && matrix.rust.toolchain == 'nightly' }}
      # Not using --all-features because that would enable e.g. gnustep
      run: cargo test ${{ env.ARGS }} ${{ env.TESTARGS }} --features=${{ env.FEATURES }},${{ env.UNSTABLE_FEATURES }}

      # TODO: Re-enable this on Foundation once we do some form of
      # availability checking.
    - name: Test static class and selectors
      if: ${{ !matrix.dinghy && (matrix.runtime || 'apple') == 'apple' }}
      run: cargo test ${{ env.ARGS }} ${{ env.TESTARGS }} --features=unstable-static-sel,unstable-static-class

    - name: Run assembly tests
      if: ${{ !contains(matrix.runtime, 'compiler-rt') }}
      shell: bash
      run:
        export HOST_TARGET=$(rustc -vV | grep host | cut -f2 -d' ')

        cargo run --target=$HOST_TARGET --features=run --bin test-assembly -- ${{ env.ARGS }}

  ui:
    name: Test UI
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.CURRENT_NIGHTLY }}
        profile: minimal
        override: true

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-ui-${{ hashFiles('**/Cargo.lock') }}

    - name: Run UI tests
      run: cargo run --features=run --bin test-ui
