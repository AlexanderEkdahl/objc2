name: CI

on:
  push:
    branches: [master]
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Faster compilation and error on warnings
  RUSTFLAGS: "-C debuginfo=0 -D warnings"
  RUSTDOCFLAGS: "-D warnings"
  CARGO_TERM_VERBOSE: true
  FEATURES: malloc,block,exception,catch_all,verify_message
  UNSTABLE_FEATURES: unstable_autoreleasesafe
  MACOSX_DEPLOYMENT_TARGET: 10.7
  IPHONEOS_DEPLOYMENT_TARGET: 7.0
  # We only support compiling Objective-C code with clang
  CC: clang
  CXX: clang++

jobs:
  fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

  test:
    name: ${{ matrix.name }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Test macOS 10.15
            os: macos-10.15
            target: x86_64-apple-darwin
          - name: Test macOS 11
            os: macos-11
            target: x86_64-apple-darwin
          - name: Build macOS AArch64
            os: macos-11
            target: aarch64-apple-darwin
            test-args: --no-run
          - name: Test macOS old SDK
            os: macos-11
            target: x86_64-apple-darwin
            # Oldest macOS version we support
            sdk: 10.7
          - name: Test macOS nightly
            os: macos-latest
            target: x86_64-apple-darwin
            rust:
              toolchain: nightly
          - name: Build macOS 32bit
            os: macos-10.15
            target: i686-apple-darwin
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            # 32-bit support was removed in 10.15, so we can't test the
            # binary, only build it
            test-args: --no-run
            # Newest SDK that supports 32-bit
            sdk: 10.13
          - name: Test GNUStep
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: gnustep-1-9
            args: --features gnustep-1-9
          - name: Test GNUStep 32bit
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            cflags: -m32
            configureflags: --target=x86-pc-linux-gnu
            args: --features gnustep-1-9
          - name: Test iOS simulator x86 64bit
            os: macos-11
            target: x86_64-apple-ios
            dinghy: true
          - name: Build iOS ARM64
            os: macos-latest
            target: aarch64-apple-ios
            test-args: --no-run
          - name: Build iOS ARMv7
            os: macos-latest
            target: armv7-apple-ios
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            test-args: --no-run
          - name: Build iOS ARMv7s
            os: macos-latest
            target: armv7s-apple-ios
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            test-args: --no-run
          - name: Build iOS 32bit x86
            os: macos-latest
            target: i386-apple-ios
            rust:
              toolchain: nightly
              target: x86_64-apple-darwin
              components: rust-src
            args: -Zbuild-std -Zdoctest-xcompile
            test-args: --no-run

    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      CFLAGS: ${{ matrix.cflags }}
      CXXFLAGS: ${{ matrix.cflags }}
      ASMFLAGS: ${{ matrix.cflags }}
      LDFLAGS: ${{ matrix.cflags }}
      # Use --no-fail-fast, except with dinghy
      TESTARGS: ${{ matrix.dinghy && ' ' || '--no-fail-fast' }} ${{ matrix.args }} ${{ matrix.test-args }}

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Install Clang
      if: contains(matrix.os, 'ubuntu')
      run: sudo apt-get -y install clang

    - name: Install cross compilation tools
      if: matrix.target == 'i686-unknown-linux-gnu'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get -y install gcc-multilib libgcc-10-dev:i386 \
          libc6-dev:i386 libstdc++-10-dev:i386 libffi-dev:i386 \
          libxml2-dev:i386 libicu-dev:i386

    - name: Download different macOS SDK
      if: matrix.sdk
      run: |
        wget https://github.com/alexey-lysiuk/macos-sdk/releases/download/${{ matrix.sdk }}/MacOSX${{ matrix.sdk }}.tar.bz2
        tar -xyf MacOSX${{ matrix.sdk }}.tar.bz2
        echo "SDKROOT=$(pwd)/MacOSX${{ matrix.sdk }}.sdk" >> $GITHUB_ENV

    - name: Cache GNUStep
      if: contains(matrix.os, 'ubuntu')
      id: cache-gnustep
      uses: actions/cache@v2
      with:
        # Ideally I would have just cached build-files, and then rerun make
        # every time, letting it figure out what's changed. But GNUStep-Base
        # ./configure invalidates the cache, which makes it very hard to
        # know when to rebuild and when not to.
        # So instead we just cache the final output:
        # - lib/libobjc.so
        # - lib/libgnustep-base.so
        # - include/Foundation/*
        # - include/objc/*
        # - ...
        path: |
          ~/gnustep/lib
          ~/gnustep/include
        key: ${{ matrix.name }}-gnustep-libobjc2_1.9-make_2.9.0-base_1.28.0

    - name: Setup GNUStep environment
      if: contains(matrix.os, 'ubuntu')
      run: |
        mkdir -p $HOME/gnustep
        echo "PATH=$HOME/gnustep/bin:$PATH" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/gnustep/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/gnustep/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "CPATH=$HOME/gnustep/include:$CPATH" >> $GITHUB_ENV
        ls -al ~/gnustep/* || true # Ignore failures

    - name: Install Make and Cmake
      if: contains(matrix.os, 'ubuntu') && steps.cache-gnustep.outputs.cache-hit != 'true'
      run: sudo apt-get -y install make cmake

    - name: Install GNUStep libobjc2 v1.9
      if: contains(matrix.os, 'ubuntu') && steps.cache-gnustep.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/libobjc2/archive/refs/tags/v1.9.tar.gz
        tar -xzf v1.9.tar.gz
        mkdir -p libobjc2-1.9/build
        cd libobjc2-1.9/build
        cmake -Wno-dev -DCMAKE_INSTALL_PREFIX=$HOME/gnustep -DTESTS=OFF ..
        make install

    - name: Install GNUStep make
      if: contains(matrix.os, 'ubuntu') && steps.cache-gnustep.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/tools-make/archive/refs/tags/make-2_9_0.tar.gz
        tar -xzf make-2_9_0.tar.gz
        mkdir -p tools-make-make-2_9_0/build
        cd tools-make-make-2_9_0/build
        ../configure --prefix=$HOME/gnustep --with-library-combo=ng-gnu-gnu
        make install

    - name: Install GNUStep-Base
      if: contains(matrix.os, 'ubuntu') && steps.cache-gnustep.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/gnustep/libs-base/archive/refs/tags/base-1_28_0.tar.gz
        tar -xzf base-1_28_0.tar.gz
        cd libs-base-base-1_28_0
        ./configure --prefix=$HOME/gnustep --disable-tls --disable-xslt ${{ matrix.platform.configureflags }}
        make install
        ls -al $HOME/gnustep/*

    - name: Cache Rust
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/
          target/
        key: cargo-${{ matrix.name }}-${{ hashFiles('**/Cargo.toml') }}

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain || 'stable' }}
        profile: minimal
        override: true
        components: ${{ matrix.rust.components }}
        # Allows installing for a different base target
        target: ${{ matrix.rust.target || matrix.target }}

    - name: Set up Cargo Dinghy
      if: matrix.dinghy
      run: |
        cargo install cargo-dinghy --target x86_64-apple-darwin

        # Launch the simulator
        xcrun simctl list runtimes
        RUNTIME_ID=$(xcrun simctl list runtimes | grep iOS | cut -d ' ' -f 7 | tail -1)
        export SIM_ID=$(xcrun simctl create My-iphone7 com.apple.CoreSimulator.SimDeviceType.iPhone-7 $RUNTIME_ID)
        xcrun simctl boot $SIM_ID

        # Overwrite `cargo` to point to `cargo-dinghy`
        mkdir bin
        echo "#!/bin/bash" > bin/cargo
        echo "cargo-dinghy --device=$SIM_ID \"\$@\"" >> bin/cargo
        chmod +x bin/cargo
        echo "PATH=$(pwd)/bin:$PATH" >> $GITHUB_ENV

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: ${{ matrix.args }}

    - name: Check documentation
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --no-deps --document-private-items ${{ matrix.args }}

    - name: Test without features
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-default-features ${{ env.TESTARGS }}

    - name: Test with features
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --features ${{ env.FEATURES }} ${{ env.TESTARGS }}

    - name: Test in release mode
      if: ${{ !matrix.dinghy }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --features ${{ env.FEATURES }} ${{ env.TESTARGS }} --release

    - name: Test with unstable features
      if: ${{ !matrix.dinghy && matrix.rust.toolchain == 'nightly' }}
      uses: actions-rs/cargo@v1
      with:
        command: test
        # Not using --all-features because that would enable e.g. gnustep
        args: --features ${{ env.FEATURES }},${{ env.UNSTABLE_FEATURES }} ${{ env.TESTARGS }}
