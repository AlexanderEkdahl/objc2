use std::borrow::Cow;
use std::collections::BTreeSet;
use std::collections::HashSet;
use std::fmt;
use std::iter;
use std::mem;

use clang::{Entity, EntityKind, EntityVisitResult};

use crate::availability::Availability;
use crate::config::ClassData;
use crate::context::Context;
use crate::expr::Expr;
use crate::id::ItemIdentifier;
use crate::immediate_children;
use crate::method::{handle_reserved, Method};
use crate::rust_type::{Ownership, Ty};
use crate::unexposed_macro::UnexposedMacro;

#[derive(serde::Deserialize, Debug, Clone, PartialEq, Eq)]
pub struct Derives(Cow<'static, str>);

impl Default for Derives {
    fn default() -> Self {
        Derives("Debug, PartialEq, Eq, Hash".into())
    }
}

impl fmt::Display for Derives {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        if !self.0.is_empty() {
            write!(f, "#[derive({})]", self.0)?;
        }
        Ok(())
    }
}

fn parse_superclass<'ty>(
    entity: &Entity<'ty>,
    context: &Context<'_>,
) -> Option<(Entity<'ty>, ItemIdentifier, Vec<String>)> {
    let mut superclass = None;
    let mut generics = Vec::new();

    immediate_children(entity, |entity, _span| match entity.get_kind() {
        EntityKind::ObjCSuperClassRef => {
            superclass = Some(
                entity
                    .get_reference()
                    .expect("ObjCSuperClassRef to reference entity"),
            );
        }
        EntityKind::TypeRef => {
            let name = entity.get_name().expect("typeref name");
            generics.push(name);
        }
        _ => {}
    });

    superclass.map(|entity| (entity, ItemIdentifier::new(&entity, context), generics))
}

/// Takes one of:
/// - `EntityKind::ObjCInterfaceDecl`
/// - `EntityKind::ObjCProtocolDecl`
/// - `EntityKind::ObjCCategoryDecl`
fn parse_objc_decl(
    entity: &Entity<'_>,
    superclass: bool,
    mut generics: Option<&mut Vec<String>>,
    data: Option<&ClassData>,
    context: &Context<'_>,
) -> (Vec<ItemIdentifier>, Vec<Method>, Vec<String>) {
    let mut protocols = Vec::new();
    let mut methods = Vec::new();
    let mut designated_initializers = Vec::new();

    // Track seen properties, so that when methods are autogenerated by the
    // compiler from them, we can skip them
    let mut properties = HashSet::new();

    immediate_children(entity, |entity, span| match entity.get_kind() {
        EntityKind::ObjCExplicitProtocolImpl if generics.is_none() && !superclass => {
            // TODO NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
        }
        EntityKind::ObjCIvarDecl | EntityKind::StructDecl | EntityKind::UnionDecl if superclass => {
            // Explicitly ignored
        }
        EntityKind::ObjCSuperClassRef | EntityKind::TypeRef if superclass => {
            // Parsed in parse_superclass
        }
        EntityKind::ObjCRootClass => {
            debug!("parsing root class");
        }
        EntityKind::ObjCClassRef if generics.is_some() => {
            // debug!("ObjCClassRef: {:?}", entity.get_display_name());
        }
        EntityKind::TemplateTypeParameter => {
            if let Some(generics) = &mut generics {
                // TODO: Generics with bounds (like NSMeasurement<UnitType: NSUnit *>)
                // let ty = entity.get_type().expect("template type");
                let name = entity.get_name().expect("template name");
                generics.push(name);
            } else {
                error!("unsupported generics");
            }
        }
        EntityKind::ObjCProtocolRef => {
            protocols.push(ItemIdentifier::new(&entity, context));
        }
        EntityKind::ObjCInstanceMethodDecl | EntityKind::ObjCClassMethodDecl => {
            drop(span);
            let partial = Method::partial(entity);

            if !properties.remove(&(partial.is_class, partial.fn_name.clone())) {
                let data = ClassData::get_method_data(data, &partial.fn_name);
                if let Some((designated_initializer, method)) = partial.parse(data, context) {
                    if designated_initializer {
                        designated_initializers.push(method.fn_name.clone());
                    }
                    methods.push(method);
                }
            }
        }
        EntityKind::ObjCPropertyDecl => {
            drop(span);
            let partial = Method::partial_property(entity);

            let getter_data = ClassData::get_method_data(data, &partial.getter_name);
            let setter_data = partial
                .setter_name
                .as_ref()
                .map(|setter_name| ClassData::get_method_data(data, setter_name));

            let (getter, setter) = partial.parse(getter_data, setter_data, context);
            if let Some(getter) = getter {
                if !properties.insert((getter.is_class, getter.fn_name.clone())) {
                    error!(?setter, "already exisiting property");
                }
                methods.push(getter);
            }
            if let Some(setter) = setter {
                if !properties.insert((setter.is_class, setter.fn_name.clone())) {
                    error!(?setter, "already exisiting property");
                }
                methods.push(setter);
            }
        }
        EntityKind::VisibilityAttr => {
            // Already exposed as entity.get_visibility()
        }
        EntityKind::ObjCException if superclass => {
            // Maybe useful for knowing when to implement `Error` for the type
        }
        EntityKind::UnexposedAttr => {
            if let Some(macro_) = UnexposedMacro::parse(&entity) {
                warn!(?macro_, "unknown macro");
            }
        }
        _ => error!("unknown"),
    });

    if !properties.is_empty() {
        error!(
            ?methods,
            ?properties,
            "did not properly add methods to properties"
        );
    }

    (protocols, methods, designated_initializers)
}

#[derive(Debug, Clone, PartialEq)]
pub enum Stmt {
    /// @interface name: superclass <protocols*>
    /// ->
    /// extern_class!
    ClassDecl {
        id: ItemIdentifier,
        generics: Vec<String>,
        availability: Availability,
        superclasses: Vec<(ItemIdentifier, Vec<String>)>,
        designated_initializers: Vec<String>,
        derives: Derives,
        ownership: Ownership,
    },
    /// @interface class_name (name) <protocols*>
    /// ->
    /// extern_methods!
    Methods {
        cls: ItemIdentifier,
        generics: Vec<String>,
        /// For the categories that have a name (though some don't, see NSClipView)
        category: ItemIdentifier<Option<String>>,
        availability: Availability,
        superclasses: Vec<(ItemIdentifier, Vec<String>)>,
        methods: Vec<Method>,
        description: Option<String>,
    },
    /// @protocol name <protocols*>
    /// ->
    /// extern_protocol!
    ProtocolDecl {
        id: ItemIdentifier,
        availability: Availability,
        protocols: Vec<ItemIdentifier>,
        methods: Vec<Method>,
    },
    /// @interface ty: _ <protocols*>
    /// @interface ty (_) <protocols*>
    ProtocolImpl {
        cls: ItemIdentifier,
        protocol: ItemIdentifier,
        generics: Vec<String>,
        availability: Availability,
    },
    /// struct name {
    ///     fields*
    /// };
    ///
    /// typedef struct {
    ///     fields*
    /// } name;
    ///
    /// typedef struct _name {
    ///     fields*
    /// } name;
    StructDecl {
        id: ItemIdentifier,
        boxable: bool,
        fields: Vec<(String, Ty)>,
    },
    /// typedef NS_OPTIONS(type, name) {
    ///     variants*
    /// };
    ///
    /// typedef NS_ENUM(type, name) {
    ///     variants*
    /// };
    ///
    /// enum name {
    ///     variants*
    /// };
    ///
    /// enum {
    ///     variants*
    /// };
    EnumDecl {
        id: ItemIdentifier<Option<String>>,
        ty: Ty,
        kind: Option<UnexposedMacro>,
        variants: Vec<(String, Expr)>,
    },
    /// static const ty name = expr;
    /// extern const ty name;
    VarDecl {
        id: ItemIdentifier,
        ty: Ty,
        value: Option<Expr>,
    },
    /// extern ret name(args*);
    ///
    /// static inline ret name(args*) {
    ///     body
    /// }
    FnDecl {
        id: ItemIdentifier,
        arguments: Vec<(String, Ty)>,
        result_type: Ty,
        // Some -> inline function.
        body: Option<()>,
        safe: bool,
    },
    /// typedef Type TypedefName;
    AliasDecl {
        id: ItemIdentifier,
        ty: Ty,
        kind: Option<UnexposedMacro>,
    },
}

fn parse_struct(entity: &Entity<'_>, context: &Context<'_>) -> (bool, Vec<(String, Ty)>) {
    let mut boxable = false;
    let mut fields = Vec::new();

    immediate_children(entity, |entity, span| match entity.get_kind() {
        EntityKind::UnexposedAttr => {
            if let Some(macro_) = UnexposedMacro::parse(&entity) {
                warn!(?macro_, "unknown macro");
            }
        }
        EntityKind::FieldDecl => {
            drop(span);
            let name = entity.get_name().expect("struct field name");
            let _span = debug_span!("field", name).entered();

            let ty = entity.get_type().expect("struct field type");
            let ty = Ty::parse_struct_field(ty, context);

            if entity.is_bit_field() {
                error!("unsound struct bitfield");
            }

            fields.push((name, ty))
        }
        EntityKind::ObjCBoxable => {
            boxable = true;
        }
        EntityKind::UnionDecl => error!("can't handle unions in structs yet"),
        _ => error!("unknown"),
    });

    (boxable, fields)
}

impl Stmt {
    pub fn parse(entity: &Entity<'_>, context: &Context<'_>) -> Vec<Self> {
        let _span = debug_span!(
            "stmt",
            kind = ?entity.get_kind(),
            dbg = entity.get_name(),
        )
        .entered();

        match entity.get_kind() {
            // These are inconsequential for us, since we resolve imports differently
            EntityKind::ObjCClassRef | EntityKind::ObjCProtocolRef => vec![],
            EntityKind::ObjCInterfaceDecl => {
                // entity.get_mangled_objc_names()
                let id = ItemIdentifier::new(&entity, context);
                let data = context.class_data.get(&id.name);

                if data.map(|data| data.skipped).unwrap_or_default() {
                    return vec![];
                }

                let availability = Availability::parse(
                    entity
                        .get_platform_availability()
                        .expect("class availability"),
                );
                let mut generics = Vec::new();

                let (protocols, methods, designated_initializers) =
                    parse_objc_decl(entity, true, Some(&mut generics), data, context);

                let mut superclass_entity = *entity;
                let mut superclasses = vec![];

                while let Some((next_entity, superclass, generics)) =
                    parse_superclass(&superclass_entity, context)
                {
                    superclass_entity = next_entity;
                    superclasses.push((superclass, generics));
                }

                let methods = Self::Methods {
                    cls: id.clone(),
                    generics: generics.clone(),
                    category: ItemIdentifier::with_name(None, &entity, context),
                    availability: availability.clone(),
                    superclasses: superclasses.clone(),
                    methods,
                    description: None,
                };

                if !data.map(|data| data.definition_skipped).unwrap_or_default() {
                    iter::once(Self::ClassDecl {
                        id: id.clone(),
                        generics: generics.clone(),
                        availability: availability.clone(),
                        superclasses,
                        designated_initializers,
                        derives: data.map(|data| data.derives.clone()).unwrap_or_default(),
                        ownership: data.map(|data| data.ownership.clone()).unwrap_or_default(),
                    })
                    .chain(protocols.into_iter().map(|protocol| Self::ProtocolImpl {
                        cls: id.clone(),
                        protocol,
                        generics: generics.clone(),
                        availability: availability.clone(),
                    }))
                    .chain(iter::once(methods))
                    .collect()
                } else {
                    vec![methods]
                }
            }
            EntityKind::ObjCCategoryDecl => {
                let category = ItemIdentifier::new_optional(&entity, context);
                let availability = Availability::parse(
                    entity
                        .get_platform_availability()
                        .expect("category availability"),
                );

                let mut cls = None;
                entity.visit_children(|entity, _parent| {
                    if entity.get_kind() == EntityKind::ObjCClassRef {
                        if cls.is_some() {
                            panic!("could not find unique category class")
                        }
                        let definition = entity
                            .get_definition()
                            .expect("category class ref definition");
                        cls = Some(ItemIdentifier::new(&definition, context));
                        EntityVisitResult::Break
                    } else {
                        EntityVisitResult::Continue
                    }
                });
                let cls = cls.expect("could not find category class");
                let data = context.class_data.get(&cls.name);

                if data.map(|data| data.skipped).unwrap_or_default() {
                    return vec![];
                }

                let mut generics = Vec::new();

                let (protocols, methods, designated_initializers) =
                    parse_objc_decl(entity, false, Some(&mut generics), data, context);

                if !designated_initializers.is_empty() {
                    warn!(
                        ?designated_initializers,
                        "designated initializer in category"
                    )
                }

                let mut superclass_entity = *entity;
                let mut superclasses = vec![];

                while let Some((next_entity, superclass, generics)) =
                    parse_superclass(&superclass_entity, context)
                {
                    superclass_entity = next_entity;
                    superclasses.push((superclass, generics));
                }

                iter::once(Self::Methods {
                    cls: cls.clone(),
                    generics: generics.clone(),
                    category,
                    availability: availability.clone(),
                    superclasses,
                    methods,
                    description: None,
                })
                .chain(protocols.into_iter().map(|protocol| Self::ProtocolImpl {
                    cls: cls.clone(),
                    generics: generics.clone(),
                    availability: availability.clone(),
                    protocol,
                }))
                .collect()
            }
            EntityKind::ObjCProtocolDecl => {
                let id = ItemIdentifier::new(&entity, context);
                let data = context.protocol_data.get(&id.name);

                if data.map(|data| data.skipped).unwrap_or_default() {
                    return vec![];
                }

                let availability = Availability::parse(
                    entity
                        .get_platform_availability()
                        .expect("protocol availability"),
                );

                let (protocols, methods, designated_initializers) =
                    parse_objc_decl(entity, false, None, data, context);

                if !designated_initializers.is_empty() {
                    warn!(
                        ?designated_initializers,
                        "designated initializer in protocol"
                    )
                }

                vec![Self::ProtocolDecl {
                    id,
                    availability,
                    protocols,
                    methods,
                }]
            }
            EntityKind::TypedefDecl => {
                let id = ItemIdentifier::new(&entity, context);
                let mut struct_ = None;
                let mut skip_struct = false;
                let mut kind = None;

                immediate_children(entity, |entity, _span| match entity.get_kind() {
                    EntityKind::UnexposedAttr => {
                        if let Some(macro_) = UnexposedMacro::parse_plus_macros(&entity, context) {
                            if kind.is_some() {
                                panic!("got multiple unexposed macros {kind:?}, {macro_:?}");
                            }
                            kind = Some(macro_);
                        }
                    }
                    EntityKind::StructDecl => {
                        if context
                            .struct_data
                            .get(&id.name)
                            .map(|data| data.skipped)
                            .unwrap_or_default()
                        {
                            skip_struct = true;
                            return;
                        }

                        let struct_name = entity.get_name();
                        if struct_name
                            .map(|name| name.starts_with('_'))
                            .unwrap_or(true)
                        {
                            // If this struct doesn't have a name, or the
                            // name is private, let's parse it with the
                            // typedef name.
                            struct_ = Some(parse_struct(&entity, context))
                        } else {
                            skip_struct = true;
                        }
                    }
                    EntityKind::ObjCClassRef
                    | EntityKind::ObjCProtocolRef
                    | EntityKind::TypeRef
                    | EntityKind::ParmDecl => {}
                    _ => error!("unknown"),
                });

                if let Some((boxable, fields)) = struct_ {
                    assert_eq!(kind, None, "should not have parsed a kind");
                    return vec![Self::StructDecl {
                        id,
                        boxable,
                        fields,
                    }];
                }

                if skip_struct {
                    return vec![];
                }

                if context
                    .typedef_data
                    .get(&id.name)
                    .map(|data| data.skipped)
                    .unwrap_or_default()
                {
                    return vec![];
                }

                let ty = entity
                    .get_typedef_underlying_type()
                    .expect("typedef underlying type");
                if let Some(ty) = Ty::parse_typedef(ty, &id.name, context) {
                    vec![Self::AliasDecl { id, ty, kind }]
                } else {
                    vec![]
                }
            }
            EntityKind::StructDecl => {
                if let Some(name) = entity.get_name() {
                    let id = ItemIdentifier::with_name(name, &entity, context);

                    if context
                        .struct_data
                        .get(&id.name)
                        .map(|data| data.skipped)
                        .unwrap_or_default()
                    {
                        return vec![];
                    }

                    // See https://github.com/rust-lang/rust-bindgen/blob/95fd17b874910184cc0fcd33b287fa4e205d9d7a/bindgen/ir/comp.rs#L1392-L1408
                    if !entity.is_definition() {
                        return vec![];
                    }

                    if !id.name.starts_with('_') {
                        let (boxable, fields) = parse_struct(entity, context);
                        return vec![Self::StructDecl {
                            id,
                            boxable,
                            fields,
                        }];
                    }
                }
                vec![]
            }
            EntityKind::EnumDecl => {
                // Enum declarations show up twice for some reason, but
                // luckily this flag is set on the least descriptive entity.
                if !entity.is_definition() {
                    return vec![];
                }

                let id = ItemIdentifier::new_optional(&entity, context);

                let data = context
                    .enum_data
                    .get(id.name.as_deref().unwrap_or("anonymous"))
                    .cloned()
                    .unwrap_or_default();
                if data.skipped {
                    return vec![];
                }

                let ty = entity.get_enum_underlying_type().expect("enum type");
                let is_signed = ty.is_signed_integer();
                let ty = Ty::parse_enum(ty, context);
                let mut kind = None;
                let mut variants = Vec::new();

                immediate_children(entity, |entity, _span| match entity.get_kind() {
                    EntityKind::EnumConstantDecl => {
                        let name = entity.get_name().expect("enum constant name");

                        if data
                            .constants
                            .get(&name)
                            .map(|data| data.skipped)
                            .unwrap_or_default()
                        {
                            return;
                        }

                        let pointer_width =
                            entity.get_translation_unit().get_target().pointer_width;

                        let val = Expr::from_val(
                            entity
                                .get_enum_constant_value()
                                .expect("enum constant value"),
                            is_signed,
                            pointer_width,
                        );
                        let expr = if data.use_value {
                            val
                        } else {
                            Expr::parse_enum_constant(&entity).unwrap_or(val)
                        };
                        variants.push((name, expr));
                    }
                    EntityKind::UnexposedAttr => {
                        if let Some(macro_) = UnexposedMacro::parse(&entity) {
                            if let Some(kind) = &kind {
                                assert_eq!(kind, &macro_, "got differing enum kinds in {id:?}");
                            } else {
                                kind = Some(macro_);
                            }
                        }
                    }
                    EntityKind::FlagEnum => {
                        let macro_ = UnexposedMacro::Options;
                        if let Some(kind) = &kind {
                            assert_eq!(kind, &macro_, "got differing enum kinds in {id:?}");
                        } else {
                            kind = Some(macro_);
                        }
                    }
                    EntityKind::VisibilityAttr => {
                        // Already exposed as entity.get_visibility()
                    }
                    _ => error!("unknown"),
                });

                if id.name.is_none() && variants.is_empty() {
                    return vec![];
                }

                vec![Self::EnumDecl {
                    id,
                    ty,
                    kind,
                    variants,
                }]
            }
            EntityKind::VarDecl => {
                let id = ItemIdentifier::new(&entity, context);

                if context
                    .statics
                    .get(&id.name)
                    .map(|data| data.skipped)
                    .unwrap_or_default()
                {
                    return vec![];
                }

                let ty = entity.get_type().expect("var type");
                let ty = Ty::parse_static(ty, context);
                let mut value = None;

                immediate_children(entity, |entity, _span| match entity.get_kind() {
                    EntityKind::UnexposedAttr => {
                        if let Some(macro_) = UnexposedMacro::parse(&entity) {
                            panic!("unexpected attribute: {macro_:?}");
                        }
                    }
                    EntityKind::VisibilityAttr => {}
                    EntityKind::ObjCClassRef => {}
                    EntityKind::TypeRef => {}
                    _ if entity.is_expression() => {
                        if value.is_none() {
                            value = Some(Expr::parse_var(&entity));
                        } else {
                            panic!("got variable value twice")
                        }
                    }
                    _ => panic!("unknown vardecl child in {id:?}: {entity:?}"),
                });

                let value = match value {
                    Some(Some(expr)) => Some(expr),
                    Some(None) => {
                        warn!("skipped static");
                        return vec![];
                    }
                    None => None,
                };

                vec![Self::VarDecl { id, ty, value }]
            }
            EntityKind::FunctionDecl => {
                let id = ItemIdentifier::new(&entity, context);

                let data = context.fns.get(&id.name).cloned().unwrap_or_default();

                if data.skipped {
                    return vec![];
                }

                if entity.is_variadic() {
                    warn!("can't handle variadic function");
                    return vec![];
                }

                let result_type = entity.get_result_type().expect("function result type");
                let result_type = Ty::parse_function_return(result_type, context);
                let mut arguments = Vec::new();

                if entity.is_static_method() {
                    warn!("unexpected static method");
                }

                immediate_children(entity, |entity, _span| match entity.get_kind() {
                    EntityKind::UnexposedAttr => {
                        if let Some(macro_) = UnexposedMacro::parse(&entity) {
                            warn!(?macro_, "unknown macro");
                        }
                    }
                    EntityKind::ObjCClassRef
                    | EntityKind::TypeRef
                    | EntityKind::ObjCProtocolRef => {}
                    EntityKind::ParmDecl => {
                        // Could also be retrieved via. `get_arguments`
                        let name = entity.get_name().unwrap_or_else(|| "_".into());
                        let ty = entity.get_type().expect("function argument type");
                        let ty = Ty::parse_function_argument(ty, context);
                        arguments.push((name, ty))
                    }
                    EntityKind::VisibilityAttr => {
                        // CG_EXTERN or UIKIT_EXTERN
                    }
                    _ => error!("unknown"),
                });

                let body = if entity.is_inline_function() {
                    Some(())
                } else {
                    None
                };

                vec![Self::FnDecl {
                    id,
                    arguments,
                    result_type,
                    body,
                    safe: !data.unsafe_,
                }]
            }
            EntityKind::UnionDecl => {
                let id = ItemIdentifier::new_optional(&entity, context);
                error!(
                    ?id,
                    has_attributes = ?entity.has_attributes(),
                    children = ?entity.get_children(),
                    "union",
                );
                vec![]
            }
            _ => {
                error!("unknown");
                vec![]
            }
        }
    }

    pub fn compare(&self, other: &Self) {
        if self != other {
            if let (
                Self::Methods {
                    methods: self_methods,
                    ..
                },
                Self::Methods {
                    methods: other_methods,
                    ..
                },
            ) = (&self, &other)
            {
                super::compare_slice(
                    self_methods,
                    other_methods,
                    |i, self_method, other_method| {
                        let _span = debug_span!("method", i).entered();
                        assert_eq!(self_method, other_method, "methods were not equal");
                    },
                );
            }

            panic!("statements were not equal:\n{self:#?}\n{other:#?}");
        }
    }
}

impl fmt::Display for Stmt {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let _span = debug_span!("stmt", discriminant = ?mem::discriminant(self)).entered();

        struct GenericTyHelper<'a>(&'a [String]);

        impl fmt::Display for GenericTyHelper<'_> {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                if !self.0.is_empty() {
                    write!(f, "<")?;
                    for generic in self.0 {
                        write!(f, "{generic}, ")?;
                    }
                    for generic in self.0 {
                        write!(f, "{generic}Ownership, ")?;
                    }
                    write!(f, ">")?;
                }
                Ok(())
            }
        }

        struct GenericParamsHelper<'a>(&'a [String]);

        impl fmt::Display for GenericParamsHelper<'_> {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                if !self.0.is_empty() {
                    write!(f, "<")?;
                    for generic in self.0 {
                        write!(f, "{generic}: Message, ")?;
                    }
                    for generic in self.0 {
                        write!(f, "{generic}Ownership: Ownership, ")?;
                    }
                    write!(f, ">")?;
                }
                Ok(())
            }
        }

        match self {
            Self::ClassDecl {
                id,
                generics,
                availability: _,
                superclasses,
                designated_initializers: _,
                derives,
                ownership: _,
            } => {
                // TODO: Use ty.get_objc_protocol_declarations()

                let macro_name = if generics.is_empty() {
                    "extern_class"
                } else {
                    "__inner_extern_class"
                };

                writeln!(f, "{macro_name}!(")?;
                writeln!(f, "    {derives}")?;
                write!(f, "    pub struct ")?;
                if generics.is_empty() {
                    write!(f, "{}", id.name)?;
                } else {
                    write!(f, "{}<", id.name)?;
                    for generic in generics {
                        write!(f, "{generic}: Message = Object, ")?;
                    }
                    for generic in generics {
                        write!(f, "{generic}Ownership: Ownership = Shared, ")?;
                    }
                    write!(f, ">")?;
                };
                if generics.is_empty() {
                    writeln!(f, ";")?;
                } else {
                    writeln!(f, " {{")?;
                    for (i, generic) in generics.iter().enumerate() {
                        // Invariant over the generic (for now)
                        writeln!(
                            f,
                            "_inner{i}: PhantomData<*mut ({generic}, {generic}Ownership)>,"
                        )?;
                    }
                    writeln!(f, "notunwindsafe: PhantomData<&'static mut ()>,")?;
                    writeln!(f, "}}")?;
                }
                writeln!(f)?;
                writeln!(
                    f,
                    "    unsafe impl{} ClassType for {}{} {{",
                    GenericParamsHelper(&generics),
                    id.name,
                    GenericTyHelper(&generics),
                )?;
                let (superclass, rest) = superclasses.split_at(1);
                let (superclass, generics) =
                    superclass.get(0).expect("must have a least one superclass");
                if !rest.is_empty() {
                    write!(f, "    #[inherits(")?;
                    let mut iter = rest.iter();
                    // Using generics in here is not technically correct, but
                    // should work for our use-cases.
                    if let Some((superclass, generics)) = iter.next() {
                        write!(f, "{}{}", superclass.name, GenericTyHelper(&generics))?;
                    }
                    for (superclass, generics) in iter {
                        write!(f, ", {}{}", superclass.name, GenericTyHelper(&generics))?;
                    }
                    writeln!(f, ")]")?;
                }
                writeln!(
                    f,
                    "        type Super = {}{};",
                    superclass.name,
                    GenericTyHelper(&generics)
                )?;
                writeln!(f, "    }}")?;
                writeln!(f, ");")?;
            }
            Self::Methods {
                cls,
                generics,
                category,
                availability: _,
                superclasses,
                methods,
                description,
            } => {
                writeln!(f, "extern_methods!(")?;
                if let Some(description) = description {
                    writeln!(f, "    /// {description}")?;
                    if category.name.is_some() {
                        writeln!(f, "    ///")?;
                    }
                }
                if let Some(category_name) = &category.name {
                    writeln!(f, "    /// {category_name}")?;
                }
                if let Some(feature) = cls.feature() {
                    writeln!(f, "    #[cfg(feature = \"{feature}\")]")?;
                }
                writeln!(
                    f,
                    "    unsafe impl{} {}{} {{",
                    GenericParamsHelper(&generics),
                    cls.name,
                    GenericTyHelper(&generics)
                )?;
                for method in methods {
                    // Use a set to deduplicate features, and to have them in
                    // a consistent order
                    let mut features = BTreeSet::new();
                    method.visit_required_types(|item| {
                        if cls.library == item.library && cls.name == item.name {
                            // The feature is guaranteed enabled if the class
                            // itself is enabled.
                            return;
                        }
                        for (superclass, _) in superclasses {
                            if superclass.library == item.library && superclass.name == item.name {
                                // Same for superclasses.
                                return;
                            }
                        }
                        if let Some(feature) = item.feature() {
                            features.insert(format!("feature = \"{feature}\""));
                        }
                    });
                    match features.len() {
                        0 => {}
                        1 => {
                            writeln!(f, "        #[cfg({})]", features.first().unwrap())?;
                        }
                        _ => {
                            writeln!(
                                f,
                                "        #[cfg(all({}))]",
                                features
                                    .iter()
                                    .map(|s| &**s)
                                    .collect::<Vec<&str>>()
                                    .join(",")
                            )?;
                        }
                    }

                    writeln!(f, "{method}")?;
                }
                writeln!(f, "    }}")?;
                writeln!(f, ");")?;
            }
            Self::ProtocolImpl {
                cls: _,
                generics: _,
                protocol: _,
                availability: _,
            } => {
                // TODO
            }
            Self::ProtocolDecl {
                id,
                availability: _,
                protocols: _,
                methods,
            } => {
                writeln!(f, "extern_protocol!(")?;
                writeln!(f, "    pub struct {};", id.name)?;
                writeln!(f)?;
                writeln!(f, "    unsafe impl ProtocolType for {} {{", id.name)?;
                for method in methods {
                    writeln!(f, "{method}")?;
                }
                writeln!(f, "    }}")?;
                writeln!(f, ");")?;
            }
            Self::StructDecl {
                id,
                boxable: _,
                fields,
            } => {
                writeln!(f, "extern_struct!(")?;
                writeln!(f, "    pub struct {} {{", id.name)?;
                for (name, ty) in fields {
                    write!(f, "        ")?;
                    if !name.starts_with('_') {
                        write!(f, "pub ")?;
                    }
                    writeln!(f, "{name}: {ty},")?;
                }
                writeln!(f, "    }}")?;
                writeln!(f, ");")?;
            }
            Self::EnumDecl {
                id,
                ty,
                kind,
                variants,
            } => {
                let macro_name = match kind {
                    None => "extern_enum",
                    Some(UnexposedMacro::Enum) => "ns_enum",
                    Some(UnexposedMacro::Options) => "ns_options",
                    Some(UnexposedMacro::ClosedEnum) => "ns_closed_enum",
                    Some(UnexposedMacro::ErrorEnum) => "ns_error_enum",
                    _ => panic!("invalid enum kind"),
                };
                writeln!(f, "{macro_name}!(")?;
                writeln!(f, "    #[underlying({ty})]")?;
                write!(f, "    pub enum ",)?;
                if let Some(name) = &id.name {
                    write!(f, "{name} ")?;
                }
                writeln!(f, "{{")?;
                for (name, expr) in variants {
                    writeln!(f, "        {name} = {expr},")?;
                }
                writeln!(f, "    }}")?;
                writeln!(f, ");")?;
            }
            Self::VarDecl {
                id,
                ty,
                value: None,
            } => {
                writeln!(f, "extern_static!({}: {ty});", id.name)?;
            }
            Self::VarDecl {
                id,
                ty,
                value: Some(expr),
            } => {
                writeln!(f, "extern_static!({}: {ty} = {expr});", id.name)?;
            }
            Self::FnDecl {
                id,
                arguments,
                result_type,
                body: None,
                safe,
            } => {
                let unsafe_ = if *safe { "" } else { " unsafe" };

                writeln!(f, "extern_fn!(")?;
                write!(f, "    pub{unsafe_} fn {}(", id.name)?;
                for (param, arg_ty) in arguments {
                    write!(f, "{}: {arg_ty},", handle_reserved(param))?;
                }
                writeln!(f, "){result_type};")?;
                writeln!(f, ");")?;
            }
            Self::FnDecl {
                id,
                arguments,
                result_type,
                body: Some(_body),
                safe,
            } => {
                let unsafe_ = if *safe { "" } else { " unsafe" };

                writeln!(f, "inline_fn!(")?;
                write!(f, "    pub{unsafe_} fn {}(", id.name)?;
                for (param, arg_ty) in arguments {
                    write!(f, "{}: {arg_ty},", handle_reserved(param))?;
                }
                writeln!(f, "){result_type} {{")?;
                writeln!(f, "        todo!()")?;
                writeln!(f, "    }}")?;
                writeln!(f, ");")?;
            }
            Self::AliasDecl { id, ty, kind } => {
                match kind {
                    Some(UnexposedMacro::TypedEnum) => {
                        writeln!(f, "typed_enum!(pub type {} = {ty};);", id.name)?;
                    }
                    Some(UnexposedMacro::TypedExtensibleEnum) => {
                        writeln!(f, "typed_extensible_enum!(pub type {} = {ty};);", id.name)?;
                    }
                    None | Some(UnexposedMacro::BridgedTypedef) => {
                        // "bridged" typedefs should just use a normal type
                        // alias.
                        writeln!(f, "pub type {} = {ty};", id.name)?;
                    }
                    kind => panic!("invalid alias kind {kind:?} for {ty:?}"),
                }
            }
        };
        Ok(())
    }
}
